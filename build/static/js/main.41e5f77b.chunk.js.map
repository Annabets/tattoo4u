{"version":3,"sources":["assets/images/tattoo.jpg","serviceWorker.js","containers/User/reducer.js","containers/HomePage/constants.js","containers/HomePage/reducer.js","containers/PhotoGridContainer/constants.js","containers/PhotoGridContainer/reducer.js","reducers.js","containers/User/constants.js","configureStore.js","components/Navbar.js","routes.js","api/app.js","containers/HomePage/actions.js","components/Modal.js","components/PhotoGrid.js","containers/PhotoGridContainer/actions.js","containers/PhotoGridContainer/index.js","containers/HomePage/index.js","containers/User/SignIn.js","containers/User/actions.js","index.js","components/App.js"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","userData","isSigningIn","error","homePageConstants","tattooPhotos","isLoadingPhotos","isUploadFailed","constants","columns","modalPhoto","isModalOpen","rootReducer","combineReducers","signIn","state","action","type","payload","homePage","_","isOnTop","concat","photoGrid","liked","store","createStore","applyMiddleware","thunkMiddleware","createLogger","user","Navbar","bg","variant","Brand","href","Nav","className","Link","NavDropdown","title","userName","id","Item","Divider","handleResponse","resp","text","then","ok","Promise","resolve","JSON","parse","reject","statusText","catch","message","api","fetch","method","data","body","homePageActions","setScrollFlag","value","getTattooPhotos","dispatch","getState","length","photos","errorMessage","Modal","props","handleCloseModal","e","target","setModalOpenFlag","document","style","this","onClick","src","filename","alt","React","Component","PhotoGrid","handleGetMorePhotos","isSearchPage","searchQuery","getMorePhotos","renderColumn","colNum","colLen","filter","item","index","map","photo","console","log","key","handleGridItemClick","renderContainerColumns","setModalPhoto","find","Number","currentTarget","handleModalLikeBtnClick","likePhoto","likeModalPhoto","handleResize","setColumns","width","innerWidth","handleScroll","innerHeight","scrollY","scrollHeight","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","isHomePage","top","handleLikeBtnClick","getArr","arrSize","i","temp","actions","flag","toggleModalPhotoLike","connect","pages","getPhotos","SignIn","handleSubmit","preventDefault","password","backgroundImage","bgImg","Form","onSubmit","Group","Control","placeholder","onChange","setState","Button","block","Text","ReactDOM","render","exact","path","HomePage","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41e5f77b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tattoo.c4a292e7.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the src load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web src is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different src. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as constants from './constants';\r\n\r\nconst initialState = {\r\n  userData: {},\r\n  isSigningIn: false,\r\n  error: ''\r\n};\r\n\r\nexport function userReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case constants.SIGN_IN_USER_REQUEST:\r\n      return {...state, isSigningIn: true};\r\n    case constants.SIGN_IN_USER_SUCCESS:\r\n      return {...state, isSigningIn: false, userData: action.userData};\r\n    case constants.SIGN_IN_USER_FAILURE:\r\n      return {isSigningIn: false, error: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const homePageConstants = {\r\n    SET_SCROLL_FLAG: 'SET_SCROLL_FLAG',\r\n\r\n    GET_PHOTOS_REQUEST: 'GET_PHOTOS_REQUEST',\r\n    GET_PHOTOS_SUCCESS: 'GET_PHOTOS_SUCCESS',\r\n    GET_PHOTOS_FAILURE: 'GET_PHOTOS_FAILURE',\r\n}\r\n","import {homePageConstants as _} from \"./constants\";\r\n\r\nconst initialState = {\r\n    tattooPhotos:[],\r\n    isLoadingPhotos: false,\r\n    isUploadFailed: false\r\n}\r\n\r\nexport function homePageReducer(state = initialState,action){\r\n    switch (action.type) {\r\n        case _.SET_SCROLL_FLAG:\r\n            return{\r\n                ...state,\r\n                isOnTop: action.payload\r\n            }\r\n        case _.GET_PHOTOS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoadingPhotos: true\r\n            }\r\n        case _.GET_PHOTOS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                tattooPhotos: state.tattooPhotos.concat(action.payload),\r\n                isLoadingPhotos: false\r\n            }\r\n        case _.GET_PHOTOS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoadingPhotos: false,\r\n                isUploadFailed: true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const constants = {\r\n    SET_COLUMNS: 'SET_COLUMNS',\r\n    SET_MODAL_PHOTO: 'SET_MODAL_PHOTO',\r\n    SET_MODAL_OPEN_FLAG: 'SET_MODAL_OPEN_FLAG',\r\n\r\n    TOGGLE_MODAL_PHOTO_LIKE: 'TOGGLE_MODAL_PHOTO_LIKE'\r\n}\r\n","import {constants as _} from \"./constants\";\r\n\r\nconst initialState = {\r\n    columns:[],\r\n    modalPhoto: {},\r\n    isModalOpen: false\r\n}\r\n\r\nexport function photoGridReducer(state = initialState,action){\r\n    switch (action.type) {\r\n        case _.SET_COLUMNS:\r\n            return{\r\n                ...state,\r\n                columns: action.payload\r\n            }\r\n        case _.SET_MODAL_OPEN_FLAG:\r\n            return {\r\n                ...state,\r\n                isModalOpen: action.payload\r\n            }\r\n        case _.SET_MODAL_PHOTO:\r\n            return {\r\n                ...state,\r\n                modalPhoto: action.payload\r\n            }\r\n        case _.TOGGLE_MODAL_PHOTO_LIKE:\r\n            return {\r\n                ...state,\r\n                modalPhoto: {\r\n                    ...state.modalPhoto,\r\n                    liked: !state.modalPhoto.liked\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {userReducer} from './containers/User/reducer';\r\nimport {homePageReducer} from \"./containers/HomePage/reducer\";\r\nimport {photoGridReducer} from \"./containers/PhotoGridContainer/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  signIn: userReducer,\r\n  homePage: homePageReducer,\r\n  photoGrid: photoGridReducer\r\n});\r\n","\r\n\r\nexport const SIGN_IN_USER_REQUEST = 'SIGN_IN_USER_REQUEST';\r\nexport const SIGN_IN_USER_SUCCESS = 'SIGN_IN_USER_SUCCESS';\r\nexport const SIGN_IN_USER_FAILURE = 'SIGN_IN_USER_FAILURE';\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from \"redux-logger\";\r\nimport {rootReducer} from \"./reducers\";\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware,\r\n    createLogger()\r\n  )\r\n);\r\n","import React from 'react';\r\nimport {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport * as routes from '../routes';\r\n\r\nexport default ({user}) => {\r\n  return (\r\n    <Navbar bg=\"primary\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">TATTOO4U</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"/\">Gallery</Nav.Link>\r\n        <Nav.Link href=\"/\">Studios</Nav.Link>\r\n        <Nav.Link href=\"/\">Masters</Nav.Link>\r\n      </Nav>\r\n      <Nav>\r\n        {user ?\r\n          <NavDropdown title={user.userName} id=\"profile-nav-dropdown\">\r\n            <NavDropdown.Item href=\"/\">My profile</NavDropdown.Item>\r\n            <NavDropdown.Divider/>\r\n            <NavDropdown.Item>Sign Out</NavDropdown.Item>\r\n          </NavDropdown> :\r\n          <Nav.Link href={routes.SIGN_IN}>SIGN IN</Nav.Link>\r\n        }\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n};\r\n","export const SIGN_IN = '/signIn';\r\nexport const PROFILE = '/profile';\r\nexport const GALLERY = '/gallery';\r\nexport const STUDIOS = '/studios';\r\nexport const MASTERS = '/masters';\r\n","const handleResponse = resp =>\r\n  resp.text()\r\n    .then(text => {\r\n      if (!resp.ok)\r\n        return Promise.reject(resp.statusText);\r\n      else\r\n        return Promise.resolve(JSON.parse(text));\r\n    })\r\n    .catch(error => Promise.reject(error.message));\r\n\r\nconst uploadPhoto = () => {}\r\n\r\nconst loadPhotos = () => fetch('http://localhost:8080/photos', {method: 'GET'}).then(handleResponse)\r\n\r\nconst signInUser = data => fetch('http://localhost:8080/signIn', {method: 'POST', body: data}).then(handleResponse)\r\n\r\nconst registerUser = data => fetch('http://localhost:8080/register', {method: 'POST', body: data}).then(handleResponse)\r\n\r\nexport const api = {\r\n  uploadPhoto,\r\n  loadPhotos,\r\n  signInUser,\r\n  registerUser,\r\n}\r\n","import {homePageConstants as _} from './constants';\r\nimport  {api} from \"../../api/app\";\r\n\r\nfunction setScrollFlag(value) {\r\n    return{\r\n        type: _.SET_SCROLL_FLAG,\r\n        payload: value\r\n    }\r\n}\r\n\r\nfunction getTattooPhotos() {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: _.GET_PHOTOS_REQUEST\r\n        })\r\n        api.loadPhotos(getState().homePage.tattooPhotos.length + 1).then(\r\n            photos => {\r\n                dispatch({\r\n                    type: _.GET_PHOTOS_SUCCESS,\r\n                    payload: photos\r\n                })\r\n            },\r\n            errorMessage => {\r\n                dispatch({\r\n                    type: _.GET_PHOTOS_FAILURE,\r\n                    payload: errorMessage\r\n                })\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const homePageActions = {\r\n    setScrollFlag,\r\n    getTattooPhotos,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Modal extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    handleCloseModal=(e)=>{\r\n        if (e.target.className === \"Modal\" || e.target.className === \"close-btn\"){\r\n            this.props.setModalOpenFlag(false);\r\n            document.body.style = `overflow-y: visible`;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {modalPhoto} = this.props;\r\n        return(\r\n            <>\r\n                <div className=\"Modal\" onClick={this.handleCloseModal}>\r\n                    <span className=\"close-btn\">&times;</span>\r\n                    <div className=\"Modal-content\">\r\n                        <div className=\"Modal-action-bar\">\r\n                        </div>\r\n                        <div className=\"Modal-photo\">\r\n                            <img src={`http://localhost:8080/img/${modalPhoto.filename}`} alt=\"\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nModal.propTypes = {\r\n    modalPhoto: PropTypes.object.isRequired,\r\n    setModalOpenFlag: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from './Modal';\r\n\r\n\r\nclass PhotoGrid extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.handleGetMorePhotos();\r\n        this.handleResize();\r\n    }\r\n\r\n    handleGetMorePhotos = () => {\r\n        const {isSearchPage, searchQuery, getMorePhotos} = this.props;\r\n        isSearchPage? getMorePhotos(searchQuery):getMorePhotos();\r\n    }\r\n\r\n    renderColumn=(colNum,colLen)=>{\r\n        const {photos} = this.props;\r\n        let columnPhotos = photos.filter((item, index) => {\r\n            return (index % colLen === colNum)\r\n        })\r\n        return columnPhotos.map((photo)=>{\r\n            console.log(photo);\r\n            return(\r\n                <div className=\"Column-item\" key={photo.id} id={photo.id} onClick={this.handleGridItemClick}>\r\n                    <img className=\"Column-item-img\" src={`http://localhost:8080/img/${photo.filename}`} alt=\"\"/>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderContainerColumns = (columns)=>{\r\n        return columns.map((item,index)=>{\r\n            return(\r\n                <div key={index} className=\"Grid-column\">{this.renderColumn(index,columns.length)}</div>\r\n            )\r\n        })\r\n    }\r\n\r\n    handleGridItemClick = (e)=>{\r\n        const {setModalOpenFlag, setModalPhoto, photos} = this.props;\r\n        if(e.target.className === \"Column-item-content\" || e.target.className === \"Column-item-img\"){\r\n            setModalPhoto(photos.find((photo)=>{return photo.id === Number(e.currentTarget.id)}));\r\n            setModalOpenFlag(true);\r\n            document.body.style = `overflow-y: hidden`;\r\n        }\r\n    }\r\n\r\n\r\n    handleModalLikeBtnClick = ()=>{\r\n        const {modalPhoto, likePhoto, likeModalPhoto} = this.props;\r\n        likeModalPhoto();\r\n        likePhoto(modalPhoto.id);\r\n    }\r\n\r\n    handleResize = ()=>{\r\n        const {columns,setColumns} = this.props;\r\n        const colNum = columns.length;\r\n        const width = window.innerWidth;\r\n        if(width < 625 && colNum!==1)\r\n            setColumns(1)\r\n        else if(width > 625 && width < 1000 && colNum!==2)\r\n            setColumns(2)\r\n        else if(width > 1000 && width < 1500 && colNum!==3)\r\n            setColumns(3)\r\n        else if(width > 1500 && colNum!==4)\r\n            setColumns(4)\r\n    }\r\n\r\n    handleScroll = ()=>{\r\n        const {isLoadingPhotos, isUploadFailed} = this.props;\r\n        if (((window.innerHeight * 2 + window.scrollY) >= document.body.scrollHeight) && !isLoadingPhotos && !isUploadFailed) {\r\n            this.handleGetMorePhotos();\r\n        }\r\n    }\r\n\r\n    componentDidMount = ()=>{\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount= ()=>{\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            columns,\r\n            isHomePage,\r\n            isSearchPage,\r\n            photos,\r\n            isLoadingPhotos,\r\n            isUploadFailed,\r\n            isModalOpen,\r\n            modalPhoto,\r\n            setModalOpenFlag,\r\n            searchQuery\r\n        } = this.props;\r\n        return(\r\n            <>\r\n                <section className=\"Photo-grid\" style={{\r\n                    top:  isSearchPage ? '57px' : null\r\n                }}>\r\n                    <div className=\"Photo-grid-title\">\r\n                        {isHomePage && <h2>{'Free Stock Photos'}</h2>}\r\n                        {isSearchPage && <h1>{`${searchQuery} Photos`}</h1>}\r\n                    </div>\r\n                    {photos.length > 0 &&\r\n                    <div className=\"Grid-container\">\r\n                        {this.renderContainerColumns(columns)}\r\n                    </div>}\r\n                    {isLoadingPhotos &&\r\n                    <div className=\"Loading-indicator\">\r\n                        {'Loading...'}\r\n                    </div>}\r\n                    {isUploadFailed && <h3>{'Failed to upload photos'}</h3>}\r\n                </section>\r\n                {isModalOpen &&\r\n                <Modal\r\n                    modalPhoto={modalPhoto}\r\n                    setModalOpenFlag={setModalOpenFlag}\r\n                    handleLikeBtnClick={this.handleModalLikeBtnClick}\r\n                />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nPhotoGrid.propTypes = {\r\n    isHomePage: PropTypes.bool.isRequired,\r\n    isSearchPage: PropTypes.bool.isRequired,\r\n    searchQuery: PropTypes.string,\r\n    isLoadingPhotos: PropTypes.bool.isRequired,\r\n    isUploadFailed: PropTypes.bool.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    photos: PropTypes.array.isRequired,\r\n    getMorePhotos: PropTypes.func.isRequired,\r\n    modalPhoto: PropTypes.object.isRequired,\r\n    isModalOpen: PropTypes.bool.isRequired,\r\n    setColumns: PropTypes.func.isRequired,\r\n    setModalOpenFlag: PropTypes.func.isRequired,\r\n    setModalPhoto: PropTypes.func.isRequired,\r\n    likePhoto: PropTypes.func.isRequired,\r\n    likeModalPhoto: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PhotoGrid;\r\n","import {constants as _} from \"./constants\";\r\n\r\nconst getArr = (arrSize)=>{\r\n    let i=0, temp=[];\r\n    while(i < arrSize) {temp[i] = i++};\r\n    return temp;\r\n}\r\n\r\nfunction setColumns(colNum) {\r\n    return{\r\n        type: _.SET_COLUMNS,\r\n        payload: getArr(colNum)\r\n    }\r\n}\r\n\r\nfunction setModalOpenFlag(flag) {\r\n    return{\r\n        type: _.SET_MODAL_OPEN_FLAG,\r\n        payload: flag\r\n    }\r\n}\r\n\r\nfunction setModalPhoto(photo) {\r\n    return{\r\n        type: _.SET_MODAL_PHOTO,\r\n        payload: photo\r\n    }\r\n}\r\n\r\nfunction toggleModalPhotoLike() {\r\n    return {\r\n        type: _.TOGGLE_MODAL_PHOTO_LIKE\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setColumns,\r\n    setModalOpenFlag,\r\n    setModalPhoto,\r\n    toggleModalPhotoLike\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PhotoGrid from '../../components/PhotoGrid';\r\nimport PropTypes from 'prop-types';\r\nimport {actions} from \"./actions\";\r\n\r\nfunction PhotoGridContainer(props) {\r\n    const {\r\n        pages,\r\n        photoGrid,\r\n        setColumns,\r\n        setModalOpenFlag,\r\n        setModalPhoto,\r\n        getMorePhotos,\r\n        isLoadingPhotos,\r\n        isUploadFailed,\r\n    } = props;\r\n    return (\r\n        <>\r\n            <PhotoGrid\r\n                photos={pages}\r\n                getMorePhotos={getMorePhotos}\r\n                columns={photoGrid.columns}\r\n                isLoadingPhotos={isLoadingPhotos}\r\n                isUploadFailed={isUploadFailed}\r\n                modalPhoto={photoGrid.modalPhoto}\r\n                isModalOpen={photoGrid.isModalOpen}\r\n                setColumns={setColumns}\r\n                setModalOpenFlag={setModalOpenFlag}\r\n                setModalPhoto={setModalPhoto}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nPhotoGridContainer.propTypes = {\r\n    isHomePage: PropTypes.bool.isRequired,\r\n    isSearchPage: PropTypes.bool.isRequired,\r\n    searchQuery: PropTypes.string,\r\n    pages: PropTypes.array.isRequired,\r\n    getMorePhotos: PropTypes.func.isRequired,\r\n    isLoadingPhotos: PropTypes.bool.isRequired,\r\n    isUploadFailed: PropTypes.bool.isRequired,\r\n    likePhoto: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        photoGrid: store.photoGrid\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setColumns: colNum => dispatch(actions.setColumns(colNum)),\r\n        setModalOpenFlag: flag => dispatch(actions.setModalOpenFlag(flag)),\r\n        setModalPhoto: photo => dispatch(actions.setModalPhoto(photo)),\r\n        likeModalPhoto: () => dispatch(actions.toggleModalPhotoLike())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(PhotoGridContainer);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Navbar from '../../components/Navbar';\r\nimport {homePageActions} from \"./actions\";\r\nimport PhotoGridContainer from '../PhotoGridContainer';\r\n\r\nfunction HomePageContainer(props) {\r\n  const {homePage, getPhotos} = props;\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <PhotoGridContainer\r\n        isHomePage={true}\r\n        isSearchPage={false}\r\n        pages={homePage.tattooPhotos}\r\n        getMorePhotos={getPhotos}\r\n        isLoadingPhotos={homePage.isLoadingPhotos}\r\n        isUploadFailed={homePage.isUploadFailed}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    homePage: store.homePage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getPhotos: () => dispatch(homePageActions.getTattooPhotos())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePageContainer);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Form, Button} from \"react-bootstrap\";\r\nimport {signIn} from './actions'\r\nimport bgImg from '../../assets/images/tattoo.jpg';\r\nimport {connect} from \"react-redux\";\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userName: '',\r\n      password: '',\r\n    }\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.signIn(this.state);\r\n  };\r\n\r\n  render() {\r\n    const {userName, password} = this.state;\r\n    return (\r\n      <div className=\"sign-in\" style={{backgroundImage: `url(${bgImg})`}}>\r\n        <div className=\"form-container\">\r\n          <div className=\"form-content\">\r\n            <h2 className=\"form-title\">Sign In</h2>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Username\"\r\n                  value={userName}\r\n                  onChange={e => this.setState({userName: e.target.value})}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={password}\r\n                  onChange={e => this.setState({password: e.target.value})}\r\n                />\r\n              </Form.Group>\r\n              <Button variant=\"primary\" type=\"submit\" block className=\"form-btn\">\r\n                Sign In\r\n              </Button>\r\n              <Form.Text className=\"text-secondary mt-2\">\r\n                Or <a href=\"#\">register now!</a>\r\n              </Form.Text>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSignIn.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n};\r\n\r\nexport default connect(null, dispatch => ({signIn: data => dispatch(signIn(data))}))(SignIn);\r\n","import * as constants from './constants';\r\nimport  {api} from \"../../api/app\";\r\n\r\nexport function signIn(data) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: constants.SIGN_IN_USER_REQUEST\r\n    });\r\n    api.signInUser(data).then(\r\n      userData => {\r\n        dispatch({\r\n          type: constants.SIGN_IN_USER_SUCCESS,\r\n          userData\r\n        })\r\n      },\r\n      errorMessage => {\r\n        dispatch({\r\n          type: constants.SIGN_IN_USER_FAILURE,\r\n          payload: errorMessage\r\n        })\r\n      }\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport './styles/app.scss';\n\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.getElementById('app'));\n\n\nserviceWorker.unregister();\n\n","import React from 'react';\r\nimport {store} from \"../configureStore\";\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport HomePage from '../containers/HomePage';\r\nimport SignIn from '../containers/User/SignIn';\r\nimport {SIGN_IN} from \"../routes\";\r\n\r\nexport default () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Route exact path=\"/\">\r\n        <HomePage/>\r\n      </Route>\r\n      <Route exact path={SIGN_IN}>\r\n        <SignIn/>\r\n      </Route>\r\n    </Router>\r\n  </Provider>\r\n);\r\n"],"sourceRoot":""}